<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- 为这个mapper指定一个唯一的namespace，namespace的值习惯上设置成包名+sql映射文件名，这样就能够保证namespace的值是唯一的
例如namespace="me.gacl.mapping.userMapper"就是me.gacl.mapping(包名)+userMapper(userMapper.xml文件去除后缀)
 -->
<mapper namespace="Mapper.addressMapper">
    <!-- 在select标签中编写查询的SQL语句， 设置select标签的id属性为getUser，id属性值必须是唯一的，不能够重复
    使用parameterType属性指明查询时使用的参数类型，resultType属性指明查询返回的结果集类型
    resultType="me.gacl.domain.User"就表示将查询结果封装成一个User类的对象返回
    User类就是users表所对应的实体类
    -->
    <!-- 
        根据id查询得到一个user对象
     -->
    <select id="getAddressByAId" parameterType="int" resultType="Address">
        select * from cp_address where aid=#{AID}
    </select>
    <select id="getAllAddresssByUID" parameterType="int" resultType="Address">
        select * from cp_address where uid=#{UID}
    </select>
    <update id="updateAddress" parameterType="Address">
        update cp_address set province = #{province} , city = #{city} , country = #{country} , detail = #{detail} , phone = #{phone} , contact = #{contact} ,postcode = #{postcode}  where aid = #{AID}
    </update>
    <insert id="addAddress" parameterType="Address">
        insert into cp_address(uid,province,city,country,detail,phone,contact,postcode) values(#{UID},#{province},#{city},#{country},#{detail},#{phone},#{contact},#{postcode})
    </insert>
    <delete id="deleteAddress" parameterType="int">delete from cp_address where aid=#{AID}</delete>
    <!--  <select id="getAllAddresssByCID" parameterType="int" resultType="Address">select * from Address where cid = #{cid}</select>

<update id="updateUser" parameterType="Address">update user set name=#{name},pass=#{pass} where id=#{id}</update>
<delete id="deleteUser" parameterType="int">delete from user where id=#{id}</delete>
-->
</mapper>